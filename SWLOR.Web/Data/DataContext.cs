// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using SWLOR.Web.Data.Entities.Data.Entities;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using SWLOR.Web.Data.Entities.Data.Entities;

namespace SWLOR.Web.Data.Entities.Data
{
    public partial class DataContext : DbContext
    {
        public DataContext()
        {
        }

        public DataContext(DbContextOptions<DataContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ApartmentBuilding> ApartmentBuilding { get; set; }
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<Association> Association { get; set; }
        public virtual DbSet<Entities.Attribute> Attribute { get; set; }
        public virtual DbSet<AuthorizedDM> AuthorizedDM { get; set; }
        public virtual DbSet<Backgrounds> Backgrounds { get; set; }
        public virtual DbSet<Bank> Bank { get; set; }
        public virtual DbSet<BankItem> BankItem { get; set; }
        public virtual DbSet<BaseItemType> BaseItemType { get; set; }
        public virtual DbSet<BaseStructure> BaseStructure { get; set; }
        public virtual DbSet<BaseStructureType> BaseStructureType { get; set; }
        public virtual DbSet<BugReport> BugReport { get; set; }
        public virtual DbSet<BuildingStyle> BuildingStyle { get; set; }
        public virtual DbSet<BuildingType> BuildingType { get; set; }
        public virtual DbSet<ChatChannel> ChatChannel { get; set; }
        public virtual DbSet<ChatLog> ChatLog { get; set; }
        public virtual DbSet<ComponentType> ComponentType { get; set; }
        public virtual DbSet<CooldownCategory> CooldownCategory { get; set; }
        public virtual DbSet<CraftBlueprint> CraftBlueprint { get; set; }
        public virtual DbSet<CraftBlueprintCategory> CraftBlueprintCategory { get; set; }
        public virtual DbSet<CraftDevice> CraftDevice { get; set; }
        public virtual DbSet<CustomEffect> CustomEffect { get; set; }
        public virtual DbSet<CustomEffectCategory> CustomEffectCategory { get; set; }
        public virtual DbSet<DMAction> DMAction { get; set; }
        public virtual DbSet<DMActionType> DMActionType { get; set; }
        public virtual DbSet<DMRole> DMRole { get; set; }
        public virtual DbSet<DatabaseVersion> DatabaseVersion { get; set; }
        public virtual DbSet<Download> Download { get; set; }
        public virtual DbSet<EnmityAdjustmentRule> EnmityAdjustmentRule { get; set; }
        public virtual DbSet<Error> Error { get; set; }
        public virtual DbSet<FameRegion> FameRegion { get; set; }
        public virtual DbSet<ForceBalanceType> ForceBalanceType { get; set; }
        public virtual DbSet<GameTopic> GameTopic { get; set; }
        public virtual DbSet<GameTopicCategory> GameTopicCategory { get; set; }
        public virtual DbSet<GrowingPlant> GrowingPlant { get; set; }
        public virtual DbSet<Guild> Guild { get; set; }
        public virtual DbSet<GuildTask> GuildTask { get; set; }
        public virtual DbSet<ItemType> ItemType { get; set; }
        public virtual DbSet<JukeboxSong> JukeboxSong { get; set; }
        public virtual DbSet<KeyItem> KeyItem { get; set; }
        public virtual DbSet<KeyItemCategory> KeyItemCategory { get; set; }
        public virtual DbSet<LootTable> LootTable { get; set; }
        public virtual DbSet<LootTableItem> LootTableItem { get; set; }
        public virtual DbSet<MarketCategory> MarketCategory { get; set; }
        public virtual DbSet<MarketRegion> MarketRegion { get; set; }
        public virtual DbSet<Message> Message { get; set; }
        public virtual DbSet<ModuleEvent> ModuleEvent { get; set; }
        public virtual DbSet<ModuleEventType> ModuleEventType { get; set; }
        public virtual DbSet<NPCGroup> NPCGroup { get; set; }
        public virtual DbSet<PCBase> PCBase { get; set; }
        public virtual DbSet<PCBasePermission> PCBasePermission { get; set; }
        public virtual DbSet<PCBaseStructure> PCBaseStructure { get; set; }
        public virtual DbSet<PCBaseStructureItem> PCBaseStructureItem { get; set; }
        public virtual DbSet<PCBaseStructurePermission> PCBaseStructurePermission { get; set; }
        public virtual DbSet<PCBaseType> PCBaseType { get; set; }
        public virtual DbSet<PCCooldown> PCCooldown { get; set; }
        public virtual DbSet<PCCraftedBlueprint> PCCraftedBlueprint { get; set; }
        public virtual DbSet<PCCustomEffect> PCCustomEffect { get; set; }
        public virtual DbSet<PCGuildPoint> PCGuildPoint { get; set; }
        public virtual DbSet<PCHelmet> PCHelmet { get; set; }
        public virtual DbSet<PCImpoundedItem> PCImpoundedItem { get; set; }
        public virtual DbSet<PCKeyItem> PCKeyItem { get; set; }
        public virtual DbSet<PCMapPin> PCMapPin { get; set; }
        public virtual DbSet<PCMapProgression> PCMapProgression { get; set; }
        public virtual DbSet<PCMarketListing> PCMarketListing { get; set; }
        public virtual DbSet<PCObjectVisibility> PCObjectVisibility { get; set; }
        public virtual DbSet<PCOutfit> PCOutfit { get; set; }
        public virtual DbSet<PCOverflowItem> PCOverflowItem { get; set; }
        public virtual DbSet<PCPerk> PCPerk { get; set; }
        public virtual DbSet<PCPerkRefund> PCPerkRefund { get; set; }
        public virtual DbSet<PCQuestItemProgress> PCQuestItemProgress { get; set; }
        public virtual DbSet<PCQuestKillTargetProgress> PCQuestKillTargetProgress { get; set; }
        public virtual DbSet<PCQuestStatus> PCQuestStatus { get; set; }
        public virtual DbSet<PCRegionalFame> PCRegionalFame { get; set; }
        public virtual DbSet<PCSearchSite> PCSearchSite { get; set; }
        public virtual DbSet<PCSearchSiteItem> PCSearchSiteItem { get; set; }
        public virtual DbSet<PCSkill> PCSkill { get; set; }
        public virtual DbSet<PCSkillPool> PCSkillPool { get; set; }
        public virtual DbSet<PCWeapon> PCWeapon { get; set; }
        public virtual DbSet<Perk> Perk { get; set; }
        public virtual DbSet<PerkCategory> PerkCategory { get; set; }
        public virtual DbSet<PerkExecutionType> PerkExecutionType { get; set; }
        public virtual DbSet<PerkFeat> PerkFeat { get; set; }
        public virtual DbSet<PerkLevel> PerkLevel { get; set; }
        public virtual DbSet<PerkLevelQuestRequirement> PerkLevelQuestRequirement { get; set; }
        public virtual DbSet<PerkLevelSkillRequirement> PerkLevelSkillRequirement { get; set; }
        public virtual DbSet<Plant> Plant { get; set; }
        public virtual DbSet<Player> Player { get; set; }
        public virtual DbSet<ServerConfiguration> ServerConfiguration { get; set; }
        public virtual DbSet<Skill> Skill { get; set; }
        public virtual DbSet<SkillCategory> SkillCategory { get; set; }
        public virtual DbSet<SpaceEncounter> SpaceEncounter { get; set; }
        public virtual DbSet<Spawn> Spawn { get; set; }
        public virtual DbSet<SpawnObject> SpawnObject { get; set; }
        public virtual DbSet<SpawnObjectType> SpawnObjectType { get; set; }
        public virtual DbSet<Specialization> Specialization { get; set; }
        public virtual DbSet<Starport> Starport { get; set; }
        public virtual DbSet<StructureMode> StructureMode { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ApartmentBuilding>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Area>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_Area_ID")
                    .IsUnique();

                entity.HasIndex(e => e.NortheastLootTableID)
                    .HasName("FK_Area_NortheastLootTableID");

                entity.HasIndex(e => e.NortheastOwner)
                    .HasName("FK_Area_NortheastOwner");

                entity.HasIndex(e => e.NorthwestLootTableID)
                    .HasName("FK_Area_NorthwestLootTableID");

                entity.HasIndex(e => e.NorthwestOwner)
                    .HasName("FK_Area_NorthwestOwner");

                entity.HasIndex(e => e.ResourceSpawnTableID)
                    .HasName("FK_Area_ResourceSpawnTableID");

                entity.HasIndex(e => e.Resref)
                    .HasName("UQ_Area_Resref")
                    .IsUnique();

                entity.HasIndex(e => e.SoutheastLootTableID)
                    .HasName("FK_Area_SoutheastLootTableID");

                entity.HasIndex(e => e.SoutheastOwner)
                    .HasName("FK_Area_SoutheastOwner");

                entity.HasIndex(e => e.SouthwestLootTableID)
                    .HasName("FK_Area_SouthwestLootTableID");

                entity.HasIndex(e => e.SouthwestOwner)
                    .HasName("FK_Area_SouthwestOwner");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DailyUpkeep).HasColumnType("int(11)");

                entity.Property(e => e.Height).HasColumnType("int(11)");

                entity.Property(e => e.MaxResourceQuality).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(128)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.NortheastLootTableID).HasColumnType("int(11)");

                entity.Property(e => e.NortheastOwner)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.NorthwestLootTableID).HasColumnType("int(11)");

                entity.Property(e => e.NorthwestOwner)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PurchasePrice).HasColumnType("int(11)");

                entity.Property(e => e.ResourceQuality).HasColumnType("int(11)");

                entity.Property(e => e.ResourceSpawnTableID).HasColumnType("int(11)");

                entity.Property(e => e.Resref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SoutheastLootTableID).HasColumnType("int(11)");

                entity.Property(e => e.SoutheastOwner)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SouthwestLootTableID).HasColumnType("int(11)");

                entity.Property(e => e.SouthwestOwner)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Width).HasColumnType("int(11)");

                entity.HasOne(d => d.NortheastLootTable)
                    .WithMany(p => p.AreaNortheastLootTable)
                    .HasForeignKey(d => d.NortheastLootTableID)
                    .HasConstraintName("FK_Area_NortheastLootTableID");

                entity.HasOne(d => d.NortheastOwnerNavigation)
                    .WithMany(p => p.AreaNortheastOwnerNavigation)
                    .HasForeignKey(d => d.NortheastOwner)
                    .HasConstraintName("FK_Area_NortheastOwner");

                entity.HasOne(d => d.NorthwestLootTable)
                    .WithMany(p => p.AreaNorthwestLootTable)
                    .HasForeignKey(d => d.NorthwestLootTableID)
                    .HasConstraintName("FK_Area_NorthwestLootTableID");

                entity.HasOne(d => d.NorthwestOwnerNavigation)
                    .WithMany(p => p.AreaNorthwestOwnerNavigation)
                    .HasForeignKey(d => d.NorthwestOwner)
                    .HasConstraintName("FK_Area_NorthwestOwner");

                entity.HasOne(d => d.ResourceSpawnTable)
                    .WithMany(p => p.Area)
                    .HasForeignKey(d => d.ResourceSpawnTableID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Area_ResourceSpawnTableID");

                entity.HasOne(d => d.SoutheastLootTable)
                    .WithMany(p => p.AreaSoutheastLootTable)
                    .HasForeignKey(d => d.SoutheastLootTableID)
                    .HasConstraintName("FK_Area_SoutheastLootTableID");

                entity.HasOne(d => d.SoutheastOwnerNavigation)
                    .WithMany(p => p.AreaSoutheastOwnerNavigation)
                    .HasForeignKey(d => d.SoutheastOwner)
                    .HasConstraintName("FK_Area_SoutheastOwner");

                entity.HasOne(d => d.SouthwestLootTable)
                    .WithMany(p => p.AreaSouthwestLootTable)
                    .HasForeignKey(d => d.SouthwestLootTableID)
                    .HasConstraintName("FK_Area_SouthwestLootTableID");

                entity.HasOne(d => d.SouthwestOwnerNavigation)
                    .WithMany(p => p.AreaSouthwestOwnerNavigation)
                    .HasForeignKey(d => d.SouthwestOwner)
                    .HasConstraintName("FK_Area_SouthwestOwner");
            });

            modelBuilder.Entity<Association>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Entities.Attribute>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.NWNValue).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(3)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<AuthorizedDM>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.CDKey)
                    .IsRequired()
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.DMRole).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Backgrounds>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_Backgrounds_ID")
                    .IsUnique();

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Bonuses)
                    .IsRequired()
                    .HasColumnType("varchar(512)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(512)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AreaResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AreaTag)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<BankItem>(entity =>
            {
                entity.HasIndex(e => e.BankID)
                    .HasName("FK_BankItem_BankID");

                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_BankItem_ID")
                    .IsUnique();

                entity.HasIndex(e => e.ItemID)
                    .HasName("UQ_BankItem_ItemID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerID, e.BankID, e.DateStored, e.ItemID, e.ItemName, e.ItemObject, e.ItemResref, e.ItemTag })
                    .HasName("IX_BankItem_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.BankID).HasColumnType("int(11)");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasColumnType("varchar(60)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemObject)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemTag)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.BankItem)
                    .HasForeignKey(d => d.BankID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankItem_BankID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.BankItem)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankItem_PlayerID");
            });

            modelBuilder.Entity<BaseItemType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<BaseStructure>(entity =>
            {
                entity.HasIndex(e => e.BaseStructureTypeID)
                    .HasName("FK_BaseStructure_BaseStructureTypeID");

                entity.HasIndex(e => e.DefaultStructureModeID)
                    .HasName("FK_BaseStructure_DefaultStructureModeID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.BaseStructureTypeID).HasColumnType("int(11)");

                entity.Property(e => e.DefaultStructureModeID).HasColumnType("int(11)");

                entity.Property(e => e.FuelRating).HasColumnType("int(11)");

                entity.Property(e => e.ItemResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlaceableResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ReinforcedStorage).HasColumnType("int(11)");

                entity.Property(e => e.ResourceStorage).HasColumnType("int(11)");

                entity.Property(e => e.RetrievalRating).HasColumnType("int(11)");

                entity.Property(e => e.Storage).HasColumnType("int(11)");

                entity.HasOne(d => d.BaseStructureType)
                    .WithMany(p => p.BaseStructure)
                    .HasForeignKey(d => d.BaseStructureTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BaseStructure_BaseStructureTypeID");

                entity.HasOne(d => d.DefaultStructureMode)
                    .WithMany(p => p.BaseStructure)
                    .HasForeignKey(d => d.DefaultStructureModeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BaseStructure_DefaultStructureModeID");
            });

            modelBuilder.Entity<BaseStructureType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<BugReport>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_BugReport_ID")
                    .IsUnique();

                entity.HasIndex(e => e.SenderPlayerID)
                    .HasName("FK_BugReport_SenderPlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AreaResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.CDKey)
                    .IsRequired()
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.SenderPlayerID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.TargetName)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasColumnType("varchar(1000)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.SenderPlayer)
                    .WithMany(p => p.BugReport)
                    .HasForeignKey(d => d.SenderPlayerID)
                    .HasConstraintName("FK_BugReport_SenderPlayerID");
            });

            modelBuilder.Entity<BuildingStyle>(entity =>
            {
                entity.HasIndex(e => e.BaseStructureID)
                    .HasName("FK_BuildingStyle_BaseStructureID");

                entity.HasIndex(e => e.BuildingTypeID)
                    .HasName("FK_BuildingStyle_BuildingTypeID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.BaseStructureID).HasColumnType("int(11)");

                entity.Property(e => e.BuildingTypeID).HasColumnType("int(11)");

                entity.Property(e => e.DailyUpkeep).HasColumnType("int(11)");

                entity.Property(e => e.DoorRule)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.FurnitureLimit).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PurchasePrice).HasColumnType("int(11)");

                entity.Property(e => e.Resref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.BaseStructure)
                    .WithMany(p => p.BuildingStyle)
                    .HasForeignKey(d => d.BaseStructureID)
                    .HasConstraintName("FK_BuildingStyle_BaseStructureID");

                entity.HasOne(d => d.BuildingType)
                    .WithMany(p => p.BuildingStyle)
                    .HasForeignKey(d => d.BuildingTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BuildingStyle_BuildingTypeID");
            });

            modelBuilder.Entity<BuildingType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<ChatChannel>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<ChatLog>(entity =>
            {
                entity.HasIndex(e => e.ChatChannelID)
                    .HasName("fk_ChatLog_ChatChannelID");

                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_ChatLog_ID")
                    .IsUnique();

                entity.HasIndex(e => e.ReceiverPlayerID)
                    .HasName("fk_ChatLog_ReceiverPlayerID");

                entity.HasIndex(e => e.SenderPlayerID)
                    .HasName("fk_ChatLog_SenderPlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ChatChannelID).HasColumnType("int(11)");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ReceiverAccountName)
                    .HasColumnType("varchar(1024)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ReceiverCDKey)
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ReceiverDMName)
                    .HasColumnType("varchar(300)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ReceiverPlayerID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SenderAccountName)
                    .IsRequired()
                    .HasColumnType("varchar(1024)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SenderCDKey)
                    .IsRequired()
                    .HasColumnType("varchar(20)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SenderDMName)
                    .HasColumnType("varchar(300)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SenderPlayerID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.ChatChannel)
                    .WithMany(p => p.ChatLog)
                    .HasForeignKey(d => d.ChatChannelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ChatLog_ChatChannelID");

                entity.HasOne(d => d.ReceiverPlayer)
                    .WithMany(p => p.ChatLogReceiverPlayer)
                    .HasForeignKey(d => d.ReceiverPlayerID)
                    .HasConstraintName("fk_ChatLog_ReceiverPlayerID");

                entity.HasOne(d => d.SenderPlayer)
                    .WithMany(p => p.ChatLogSenderPlayer)
                    .HasForeignKey(d => d.SenderPlayerID)
                    .HasConstraintName("fk_ChatLog_SenderPlayerID");
            });

            modelBuilder.Entity<ComponentType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ReassembledResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<CooldownCategory>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<CraftBlueprint>(entity =>
            {
                entity.HasIndex(e => e.BaseStructureID)
                    .HasName("FK__CraftBlue__BaseS__4A18FC72");

                entity.HasIndex(e => e.CraftCategoryID)
                    .HasName("fk_CraftBlueprint_CraftCategoryID");

                entity.HasIndex(e => e.CraftDeviceID)
                    .HasName("FK_CraftBlueprint_CraftDeviceID");

                entity.HasIndex(e => e.MainComponentTypeID)
                    .HasName("fk_CraftBlueprint_MainComponentTypeID");

                entity.HasIndex(e => e.PerkID)
                    .HasName("FK_CraftBlueprint_PerkID");

                entity.HasIndex(e => e.SecondaryComponentTypeID)
                    .HasName("fk_CraftBlueprint_SecondaryComponentTypeID");

                entity.HasIndex(e => e.SkillID)
                    .HasName("FK_CraftBlueprint_SkillID");

                entity.HasIndex(e => e.TertiaryComponentTypeID)
                    .HasName("fk_CraftBlueprint_TertiaryComponentTypeID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.BaseLevel).HasColumnType("int(11)");

                entity.Property(e => e.BaseStructureID).HasColumnType("int(11)");

                entity.Property(e => e.CraftCategoryID).HasColumnType("int(11)");

                entity.Property(e => e.CraftDeviceID).HasColumnType("int(11)");

                entity.Property(e => e.EnhancementSlots).HasColumnType("int(11)");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.MainComponentTypeID).HasColumnType("int(11)");

                entity.Property(e => e.MainMaximum).HasColumnType("int(11)");

                entity.Property(e => e.MainMinimum).HasColumnType("int(11)");

                entity.Property(e => e.PerkID).HasColumnType("int(11)");

                entity.Property(e => e.Quantity).HasColumnType("int(11)");

                entity.Property(e => e.RequiredPerkLevel).HasColumnType("int(11)");

                entity.Property(e => e.SecondaryComponentTypeID).HasColumnType("int(11)");

                entity.Property(e => e.SecondaryMaximum).HasColumnType("int(11)");

                entity.Property(e => e.SecondaryMinimum).HasColumnType("int(11)");

                entity.Property(e => e.SkillID).HasColumnType("int(11)");

                entity.Property(e => e.TertiaryComponentTypeID).HasColumnType("int(11)");

                entity.Property(e => e.TertiaryMaximum).HasColumnType("int(11)");

                entity.Property(e => e.TertiaryMinimum).HasColumnType("int(11)");

                entity.HasOne(d => d.BaseStructure)
                    .WithMany(p => p.CraftBlueprint)
                    .HasForeignKey(d => d.BaseStructureID)
                    .HasConstraintName("FK__CraftBlue__BaseS__4A18FC72");

                entity.HasOne(d => d.CraftCategory)
                    .WithMany(p => p.CraftBlueprint)
                    .HasForeignKey(d => d.CraftCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CraftBlueprint_CraftCategoryID");

                entity.HasOne(d => d.CraftDevice)
                    .WithMany(p => p.CraftBlueprint)
                    .HasForeignKey(d => d.CraftDeviceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CraftBlueprint_CraftDeviceID");

                entity.HasOne(d => d.MainComponentType)
                    .WithMany(p => p.CraftBlueprintMainComponentType)
                    .HasForeignKey(d => d.MainComponentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CraftBlueprint_MainComponentTypeID");

                entity.HasOne(d => d.Perk)
                    .WithMany(p => p.CraftBlueprint)
                    .HasForeignKey(d => d.PerkID)
                    .HasConstraintName("FK_CraftBlueprint_PerkID");

                entity.HasOne(d => d.SecondaryComponentType)
                    .WithMany(p => p.CraftBlueprintSecondaryComponentType)
                    .HasForeignKey(d => d.SecondaryComponentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CraftBlueprint_SecondaryComponentTypeID");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.CraftBlueprint)
                    .HasForeignKey(d => d.SkillID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CraftBlueprint_SkillID");

                entity.HasOne(d => d.TertiaryComponentType)
                    .WithMany(p => p.CraftBlueprintTertiaryComponentType)
                    .HasForeignKey(d => d.TertiaryComponentTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_CraftBlueprint_TertiaryComponentTypeID");
            });

            modelBuilder.Entity<CraftBlueprintCategory>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<CraftDevice>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<CustomEffect>(entity =>
            {
                entity.HasIndex(e => e.CustomEffectCategoryID)
                    .HasName("FK_CustomEffect_CustomEffectCategoryID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.CustomEffectCategoryID).HasColumnType("int(11)");

                entity.Property(e => e.IconID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.CustomEffectCategory)
                    .WithMany(p => p.CustomEffect)
                    .HasForeignKey(d => d.CustomEffectCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CustomEffect_CustomEffectCategoryID");
            });

            modelBuilder.Entity<CustomEffectCategory>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<DMAction>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_DMAction_ID")
                    .IsUnique();

                entity.HasIndex(e => e.DMActionTypeID)
                    .HasName("FK_DMAction_DMActionTypeID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.CDKey)
                    .IsRequired()
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.DMActionTypeID).HasColumnType("int(11)");

                entity.Property(e => e.Details)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(128)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.DMActionType)
                    .WithMany(p => p.DMAction)
                    .HasForeignKey(d => d.DMActionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DMAction_DMActionTypeID");
            });

            modelBuilder.Entity<DMActionType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<DMRole>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<DatabaseVersion>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_DatabaseVersion_ID")
                    .IsUnique();

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ScriptName)
                    .IsRequired()
                    .HasColumnType("varchar(100)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.VersionNumber).HasColumnType("int(11)");
            });

            modelBuilder.Entity<Download>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.ContentType)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(1000)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Instructions)
                    .IsRequired()
                    .HasColumnType("varchar(1000)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.LocalPath)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(50)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<EnmityAdjustmentRule>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Error>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_Error_ID")
                    .IsUnique();

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Caller)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.StackTrace)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<FameRegion>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<ForceBalanceType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<GameTopic>(entity =>
            {
                entity.HasIndex(e => e.GameTopicCategoryID)
                    .HasName("FK_GameTopic_GameTopicCategoryID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.GameTopicCategoryID).HasColumnType("int(11)");

                entity.Property(e => e.Icon)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Sequence).HasColumnType("int(11)");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.GameTopicCategory)
                    .WithMany(p => p.GameTopic)
                    .HasForeignKey(d => d.GameTopicCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GameTopic_GameTopicCategoryID");
            });

            modelBuilder.Entity<GameTopicCategory>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<GrowingPlant>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_GrowingPlant_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PlantID)
                    .HasName("FK_GrowingPlant_PlantID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.LocationAreaTag)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.LongevityBonus).HasColumnType("int(11)");

                entity.Property(e => e.PlantID).HasColumnType("int(11)");

                entity.Property(e => e.RemainingTicks).HasColumnType("int(11)");

                entity.Property(e => e.TotalTicks).HasColumnType("int(11)");

                entity.Property(e => e.WaterStatus).HasColumnType("int(11)");

                entity.HasOne(d => d.Plant)
                    .WithMany(p => p.GrowingPlant)
                    .HasForeignKey(d => d.PlantID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GrowingPlant_PlantID");
            });

            modelBuilder.Entity<Guild>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(1000)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<GuildTask>(entity =>
            {
                entity.HasIndex(e => e.GuildID)
                    .HasName("FK_GuildTask_GuildID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.GuildID).HasColumnType("int(11)");

                entity.Property(e => e.QuestID).HasColumnType("int(11)");

                entity.Property(e => e.RequiredRank).HasColumnType("int(11)");

                entity.HasOne(d => d.Guild)
                    .WithMany(p => p.GuildTask)
                    .HasForeignKey(d => d.GuildID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_GuildTask_GuildID");
            });

            modelBuilder.Entity<ItemType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<JukeboxSong>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.AmbientMusicID).HasColumnType("int(11)");

                entity.Property(e => e.DisplayName)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<KeyItem>(entity =>
            {
                entity.HasIndex(e => e.KeyItemCategoryID)
                    .HasName("fk_KeyItem_KeyItemCategoryID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(1000)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.KeyItemCategoryID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.KeyItemCategory)
                    .WithMany(p => p.KeyItem)
                    .HasForeignKey(d => d.KeyItemCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_KeyItem_KeyItemCategoryID");
            });

            modelBuilder.Entity<KeyItemCategory>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<LootTable>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<LootTableItem>(entity =>
            {
                entity.HasIndex(e => e.LootTableID)
                    .HasName("fk_LootTableItem_LootTableID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.LootTableID).HasColumnType("int(11)");

                entity.Property(e => e.MaxQuantity).HasColumnType("int(11)");

                entity.Property(e => e.Resref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SpawnRule)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weight).HasColumnType("tinyint(3) unsigned");

                entity.HasOne(d => d.LootTable)
                    .WithMany(p => p.LootTableItem)
                    .HasForeignKey(d => d.LootTableID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_LootTableItem_LootTableID");
            });

            modelBuilder.Entity<MarketCategory>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<MarketRegion>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Message>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_Message_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PlayerID)
                    .HasName("FK_Message_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.BoardID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Text)
                    .IsRequired()
                    .HasColumnType("varchar(4000)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Title)
                    .IsRequired()
                    .HasColumnType("varchar(256)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Message)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Message_PlayerID");
            });

            modelBuilder.Entity<ModuleEvent>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_ClientLogEvent_ID")
                    .IsUnique();

                entity.HasIndex(e => e.ModuleEventTypeID)
                    .HasName("FK_ClientLogEvent_ClientLogEventTypeID");

                entity.HasIndex(e => e.PlayerID)
                    .HasName("FK_ClientLogEvent_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasColumnType("varchar(1024)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AreaName)
                    .HasColumnType("varchar(128)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AreaResref)
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AreaSector)
                    .HasColumnType("char(2)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AreaTag)
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AttackerPlayerID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.BankID).HasColumnType("int(11)");

                entity.Property(e => e.BaseStructureID).HasColumnType("int(11)");

                entity.Property(e => e.CDKey)
                    .IsRequired()
                    .HasColumnType("varchar(20)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CustomName)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemName)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemResref)
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemTag)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ModuleEventTypeID).HasColumnType("int(11)");

                entity.Property(e => e.PCBaseID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PCBaseStructureID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PCBaseTypeID).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.ModuleEventType)
                    .WithMany(p => p.ModuleEvent)
                    .HasForeignKey(d => d.ModuleEventTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientLogEvent_ClientLogEventTypeID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.ModuleEvent)
                    .HasForeignKey(d => d.PlayerID)
                    .HasConstraintName("FK_ClientLogEvent_PlayerID");
            });

            modelBuilder.Entity<ModuleEventType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(30)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<NPCGroup>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<PCBase>(entity =>
            {
                entity.HasIndex(e => e.ApartmentBuildingID)
                    .HasName("FK_PCBase_ApartmentBuildingID");

                entity.HasIndex(e => e.AreaResref)
                    .HasName("FK_PCBase_AreaResref");

                entity.HasIndex(e => e.BuildingStyleID)
                    .HasName("FK_PCBase_BuildingStyleID");

                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCBase_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PCBaseTypeID)
                    .HasName("FK_PCBase_PCBaseTypeID");

                entity.HasIndex(e => e.PlayerID)
                    .HasName("FK_PCBase_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ApartmentBuildingID).HasColumnType("int(11)");

                entity.Property(e => e.AreaResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.BuildingStyleID).HasColumnType("int(11)");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CustomName)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Fuel).HasColumnType("int(11)");

                entity.Property(e => e.PCBaseTypeID).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ReinforcedFuel).HasColumnType("int(11)");

                entity.Property(e => e.Sector)
                    .IsRequired()
                    .HasColumnType("char(2)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ShieldHP).HasColumnType("int(11)");

                entity.Property(e => e.ShipLocation)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Starcharts).HasColumnType("int(11)");

                entity.HasOne(d => d.ApartmentBuilding)
                    .WithMany(p => p.PCBase)
                    .HasForeignKey(d => d.ApartmentBuildingID)
                    .HasConstraintName("FK_PCBase_ApartmentBuildingID");

                entity.HasOne(d => d.AreaResrefNavigation)
                    .WithMany(p => p.PCBase)
                    .HasPrincipalKey(p => p.Resref)
                    .HasForeignKey(d => d.AreaResref)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBase_AreaResref");

                entity.HasOne(d => d.BuildingStyle)
                    .WithMany(p => p.PCBase)
                    .HasForeignKey(d => d.BuildingStyleID)
                    .HasConstraintName("FK_PCBase_BuildingStyleID");

                entity.HasOne(d => d.PCBaseType)
                    .WithMany(p => p.PCBase)
                    .HasForeignKey(d => d.PCBaseTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBase_PCBaseTypeID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCBase)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBase_PlayerID");
            });

            modelBuilder.Entity<PCBasePermission>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCBasePermission_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PCBaseID)
                    .HasName("FK_PCBasePermission_PCBaseID");

                entity.HasIndex(e => e.PlayerID)
                    .HasName("FK_PCBasePermission_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PCBaseID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.PCBase)
                    .WithMany(p => p.PCBasePermission)
                    .HasForeignKey(d => d.PCBaseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBasePermission_PCBaseID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCBasePermission)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBasePermission_PlayerID");
            });

            modelBuilder.Entity<PCBaseStructure>(entity =>
            {
                entity.HasIndex(e => e.BaseStructureID)
                    .HasName("FK_PCBaseStructure_BaseStructureID");

                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCBaseStructure_ID")
                    .IsUnique();

                entity.HasIndex(e => e.ExteriorStyleID)
                    .HasName("FK_PCBaseStructure_ExteriorStyleID");

                entity.HasIndex(e => e.InteriorStyleID)
                    .HasName("FK_PCBaseStructure_InteriorStyleID");

                entity.HasIndex(e => e.PCBaseID)
                    .HasName("FK_PCBaseStructure_PCBaseID");

                entity.HasIndex(e => e.ParentPCBaseStructureID)
                    .HasName("FK_PCBaseStructure_ParentPCBaseStructureID");

                entity.HasIndex(e => e.StructureModeID)
                    .HasName("FK_PCBaseStructure_StructureModeID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.BaseStructureID).HasColumnType("int(11)");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CustomName)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ExteriorStyleID).HasColumnType("int(11)");

                entity.Property(e => e.InteriorStyleID).HasColumnType("int(11)");

                entity.Property(e => e.PCBaseID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ParentPCBaseStructureID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.StructureBonus).HasColumnType("int(11)");

                entity.Property(e => e.StructureModeID).HasColumnType("int(11)");

                entity.HasOne(d => d.BaseStructure)
                    .WithMany(p => p.PCBaseStructure)
                    .HasForeignKey(d => d.BaseStructureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBaseStructure_BaseStructureID");

                entity.HasOne(d => d.ExteriorStyle)
                    .WithMany(p => p.PCBaseStructureExteriorStyle)
                    .HasForeignKey(d => d.ExteriorStyleID)
                    .HasConstraintName("FK_PCBaseStructure_ExteriorStyleID");

                entity.HasOne(d => d.InteriorStyle)
                    .WithMany(p => p.PCBaseStructureInteriorStyle)
                    .HasForeignKey(d => d.InteriorStyleID)
                    .HasConstraintName("FK_PCBaseStructure_InteriorStyleID");

                entity.HasOne(d => d.PCBase)
                    .WithMany(p => p.PCBaseStructure)
                    .HasForeignKey(d => d.PCBaseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBaseStructure_PCBaseID");

                entity.HasOne(d => d.ParentPCBaseStructure)
                    .WithMany(p => p.InverseParentPCBaseStructure)
                    .HasForeignKey(d => d.ParentPCBaseStructureID)
                    .HasConstraintName("FK_PCBaseStructure_ParentPCBaseStructureID");

                entity.HasOne(d => d.StructureMode)
                    .WithMany(p => p.PCBaseStructure)
                    .HasForeignKey(d => d.StructureModeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBaseStructure_StructureModeID");
            });

            modelBuilder.Entity<PCBaseStructureItem>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCBaseStructureItem_ID")
                    .IsUnique();

                entity.HasIndex(e => e.ItemGlobalID)
                    .HasName("UQ_PCBaseStructureItem_ItemGlobalID")
                    .IsUnique();

                entity.HasIndex(e => e.PCBaseStructureID)
                    .HasName("FK_PCBaseStructureItem_PCBaseStructureID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemGlobalID)
                    .IsRequired()
                    .HasColumnType("varchar(60)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemObject)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemTag)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PCBaseStructureID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.PCBaseStructure)
                    .WithMany(p => p.PCBaseStructureItem)
                    .HasForeignKey(d => d.PCBaseStructureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBaseStructureItem_PCBaseStructureID");
            });

            modelBuilder.Entity<PCBaseStructurePermission>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCBaseStructurePermission_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PCBaseStructureID)
                    .HasName("FK_PCBaseStructurePermissions_PCBaseStructureID");

                entity.HasIndex(e => e.PlayerID)
                    .HasName("FK_PCBaseStructurePermissions_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PCBaseStructureID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.PCBaseStructure)
                    .WithMany(p => p.PCBaseStructurePermission)
                    .HasForeignKey(d => d.PCBaseStructureID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBaseStructurePermissions_PCBaseStructureID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCBaseStructurePermission)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCBaseStructurePermissions_PlayerID");
            });

            modelBuilder.Entity<PCBaseType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<PCCooldown>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCCooldown_ID")
                    .IsUnique();

                entity.HasIndex(e => e.CooldownCategoryID)
                    .HasName("fk_PCCooldown_CooldownCategoryID");

                entity.HasIndex(e => new { e.PlayerID, e.CooldownCategoryID, e.DateUnlocked })
                    .HasName("IX_PCCooldown_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CooldownCategoryID).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.CooldownCategory)
                    .WithMany(p => p.PCCooldown)
                    .HasForeignKey(d => d.CooldownCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCCooldown_CooldownCategoryID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCCooldown)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCCooldown_PlayerID");
            });

            modelBuilder.Entity<PCCraftedBlueprint>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCCraftedBlueprint_ID")
                    .IsUnique();

                entity.HasIndex(e => e.CraftBlueprintID)
                    .HasName("FK_PCCraftedBlueprint_CraftBlueprintID");

                entity.HasIndex(e => new { e.PlayerID, e.CraftBlueprintID, e.DateFirstCrafted })
                    .HasName("IX_PCCraftedBlueprint_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CraftBlueprintID).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.CraftBlueprint)
                    .WithMany(p => p.PCCraftedBlueprint)
                    .HasForeignKey(d => d.CraftBlueprintID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCraftedBlueprint_CraftBlueprintID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCCraftedBlueprint)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCCraftedBlueprint_PlayerID");
            });

            modelBuilder.Entity<PCCustomEffect>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCCustomEffect_ID")
                    .IsUnique();

                entity.HasIndex(e => e.CustomEffectID)
                    .HasName("fk_PCCustomEffect_CustomEffectID");

                entity.HasIndex(e => new { e.PlayerID, e.CasterNWNObjectID, e.CustomEffectID, e.Data, e.EffectiveLevel, e.StancePerkID, e.Ticks })
                    .HasName("IX_PCCustomEffect_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.CasterNWNObjectID)
                    .IsRequired()
                    .HasColumnType("varchar(10)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CustomEffectID).HasColumnType("int(11)");

                entity.Property(e => e.Data)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.EffectiveLevel).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.StancePerkID).HasColumnType("int(11)");

                entity.Property(e => e.Ticks).HasColumnType("int(11)");

                entity.HasOne(d => d.CustomEffect)
                    .WithMany(p => p.PCCustomEffect)
                    .HasForeignKey(d => d.CustomEffectID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCCustomEffect_CustomEffectID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCCustomEffect)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCCustomEffect_PlayerID");
            });

            modelBuilder.Entity<PCGuildPoint>(entity =>
            {
                entity.HasIndex(e => e.GuildID)
                    .HasName("FK_PCGuildPoint_GuildID");

                entity.HasIndex(e => new { e.PlayerID, e.GuildID })
                    .HasName("UQ_PCGuildPoint_PlayerIDGuildID")
                    .IsUnique();

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.GuildID).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Points).HasColumnType("int(11)");

                entity.Property(e => e.Rank).HasColumnType("int(11)");

                entity.HasOne(d => d.Guild)
                    .WithMany(p => p.PCGuildPoint)
                    .HasForeignKey(d => d.GuildID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCGuildPoint_GuildID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCGuildPoint)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCGuildPoint_PlayerID");
            });

            modelBuilder.Entity<PCHelmet>(entity =>
            {
                entity.HasKey(e => e.PlayerID)
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCHelmet_PlayerID")
                    .IsUnique();

                entity.Property(e => e.PlayerID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Helmet1)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Helmet10)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Helmet2)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Helmet3)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Helmet4)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Helmet5)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Helmet6)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Helmet7)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Helmet8)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Helmet9)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithOne(p => p.PCHelmet)
                    .HasForeignKey<PCHelmet>(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCHelmet_PlayerID");
            });

            modelBuilder.Entity<PCImpoundedItem>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCImpoundedItem_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerID, e.DateRetrieved });

                entity.HasIndex(e => new { e.DateImpounded, e.DateRetrieved, e.ItemName, e.ItemObject, e.ItemResref, e.ItemTag, e.PlayerID })
                    .HasName("IX_PCImpoundedItem_DateImpounded");

                entity.HasIndex(e => new { e.DateRetrieved, e.DateImpounded, e.ItemName, e.ItemObject, e.ItemResref, e.ItemTag, e.PlayerID })
                    .HasName("IX_PCImpoundedItem_DateRetrieved");

                entity.HasIndex(e => new { e.PlayerID, e.DateImpounded, e.DateRetrieved, e.ItemName, e.ItemObject, e.ItemResref, e.ItemTag })
                    .HasName("IX_PCImpoundedItem_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemObject)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemTag)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCImpoundedItem)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCItemImpound_PlayerID");
            });

            modelBuilder.Entity<PCKeyItem>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCKeyItem_ID")
                    .IsUnique();

                entity.HasIndex(e => e.KeyItemID)
                    .HasName("fk_PCKeyItem_KeyItemID");

                entity.HasIndex(e => new { e.PlayerID, e.AcquiredDate, e.KeyItemID })
                    .HasName("IX_PCKeyItem_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.KeyItemID).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.KeyItem)
                    .WithMany(p => p.PCKeyItem)
                    .HasForeignKey(d => d.KeyItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCKeyItem_KeyItemID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCKeyItem)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCKeyItem_PlayerID");
            });

            modelBuilder.Entity<PCMapPin>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCMapPin_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerID, e.AreaTag, e.NoteText, e.PositionX, e.PositionY })
                    .HasName("IX_PCMapPin_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AreaTag)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NoteText)
                    .IsRequired()
                    .HasColumnType("varchar(1024)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCMapPin)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCMapPin_PlayerID");
            });

            modelBuilder.Entity<PCMapProgression>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCMapProgression_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerID, e.AreaResref, e.Progression })
                    .HasName("IX_PCMapProgression_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.AreaResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Progression)
                    .IsRequired()
                    .HasColumnType("varchar(1024)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCMapProgression)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCMapProgression_PlayerID");
            });

            modelBuilder.Entity<PCMarketListing>(entity =>
            {
                entity.HasIndex(e => e.BuyerPlayerID)
                    .HasName("FK_PCMarketListing_BuyerPlayerID");

                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCMarketListing_ID")
                    .IsUnique();

                entity.HasIndex(e => e.MarketCategoryID)
                    .HasName("FK_PCMarketListing_MarketCategoryID");

                entity.HasIndex(e => e.MarketRegionID)
                    .HasName("FK_PCMarketListing_MarketRegionID");

                entity.HasIndex(e => e.SellerPlayerID)
                    .HasName("FK_PCMarketListing_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.BuyerPlayerID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemID)
                    .IsRequired()
                    .HasColumnType("varchar(60)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemObject)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemRecommendedLevel).HasColumnType("int(11)");

                entity.Property(e => e.ItemResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemStackSize).HasColumnType("int(11)");

                entity.Property(e => e.ItemTag)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.MarketCategoryID).HasColumnType("int(11)");

                entity.Property(e => e.MarketRegionID).HasColumnType("int(11)");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasColumnType("varchar(1024)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Price).HasColumnType("int(11)");

                entity.Property(e => e.SellerPlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.BuyerPlayer)
                    .WithMany(p => p.PCMarketListingBuyerPlayer)
                    .HasForeignKey(d => d.BuyerPlayerID)
                    .HasConstraintName("FK_PCMarketListing_BuyerPlayerID");

                entity.HasOne(d => d.MarketCategory)
                    .WithMany(p => p.PCMarketListing)
                    .HasForeignKey(d => d.MarketCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCMarketListing_MarketCategoryID");

                entity.HasOne(d => d.MarketRegion)
                    .WithMany(p => p.PCMarketListing)
                    .HasForeignKey(d => d.MarketRegionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCMarketListing_MarketRegionID");

                entity.HasOne(d => d.SellerPlayer)
                    .WithMany(p => p.PCMarketListingSellerPlayer)
                    .HasForeignKey(d => d.SellerPlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCMarketListing_PlayerID");
            });

            modelBuilder.Entity<PCObjectVisibility>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCObjectVisibility_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerID, e.IsVisible, e.VisibilityObjectID })
                    .HasName("IX_PCObjectVisibility_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.VisibilityObjectID)
                    .IsRequired()
                    .HasColumnType("varchar(200)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCObjectVisibility)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCObjectVisibility_PlayerID");
            });

            modelBuilder.Entity<PCOutfit>(entity =>
            {
                entity.HasKey(e => e.PlayerID)
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCOutfit_PlayerID")
                    .IsUnique();

                entity.Property(e => e.PlayerID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Outfit1)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Outfit10)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Outfit2)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Outfit3)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Outfit4)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Outfit5)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Outfit6)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Outfit7)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Outfit8)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Outfit9)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithOne(p => p.PCOutfit)
                    .HasForeignKey<PCOutfit>(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCOutfit_PlayerID");
            });

            modelBuilder.Entity<PCOverflowItem>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCOverflowItem_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerID, e.ItemName, e.ItemObject, e.ItemResref, e.ItemTag })
                    .HasName("IX_PCOverflowItem_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemObject)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ItemTag)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCOverflowItem)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCOverflowItem_PlayerID");
            });

            modelBuilder.Entity<PCPerk>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCPerk_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PerkID)
                    .HasName("fk_PCPerk_PerkID");

                entity.HasIndex(e => new { e.PlayerID, e.AcquiredDate, e.PerkID, e.PerkLevel })
                    .HasName("IX_PCPerk_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PerkID).HasColumnType("int(11)");

                entity.Property(e => e.PerkLevel).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Perk)
                    .WithMany(p => p.PCPerk)
                    .HasForeignKey(d => d.PerkID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCPerk_PerkID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCPerk)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCPerk_PlayerID");
            });

            modelBuilder.Entity<PCPerkRefund>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCPerkRefund_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PerkID)
                    .HasName("FK_PCPerkRefund_PerkID");

                entity.HasIndex(e => e.PlayerID)
                    .HasName("FK_PCPerkRefund_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Level).HasColumnType("int(11)");

                entity.Property(e => e.PerkID).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Perk)
                    .WithMany(p => p.PCPerkRefund)
                    .HasForeignKey(d => d.PerkID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCPerkRefund_PerkID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCPerkRefund)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCPerkRefund_PlayerID");
            });

            modelBuilder.Entity<PCQuestItemProgress>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCQuestItemProgress_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PCQuestStatusID)
                    .HasName("FK_PCQuestItemProgress_PCQuesttatusID");

                entity.HasIndex(e => new { e.PlayerID, e.MustBeCraftedByPlayer, e.PCQuestStatusID, e.Remaining, e.Resref })
                    .HasName("IX_PCQuestItemProgress_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PCQuestStatusID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Remaining).HasColumnType("int(11)");

                entity.Property(e => e.Resref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.PCQuestStatus)
                    .WithMany(p => p.PCQuestItemProgress)
                    .HasForeignKey(d => d.PCQuestStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuestItemProgress_PCQuesttatusID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCQuestItemProgress)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuestItemProgress_PlayerID");
            });

            modelBuilder.Entity<PCQuestKillTargetProgress>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCQuestKillTargetProgress_ID")
                    .IsUnique();

                entity.HasIndex(e => e.NPCGroupID)
                    .HasName("FK_PCQuestKillTargetProgress_NPCGroupID");

                entity.HasIndex(e => e.PCQuestStatusID)
                    .HasName("FK_PCQuestKillTargetProgress_PCQuesttatusID");

                entity.HasIndex(e => new { e.PlayerID, e.NPCGroupID, e.PCQuestStatusID, e.RemainingToKill })
                    .HasName("IX_PCQuestKillTargetProgress_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.NPCGroupID).HasColumnType("int(11)");

                entity.Property(e => e.PCQuestStatusID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.RemainingToKill).HasColumnType("int(11)");

                entity.HasOne(d => d.NPCGroup)
                    .WithMany(p => p.PCQuestKillTargetProgress)
                    .HasForeignKey(d => d.NPCGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuestKillTargetProgress_NPCGroupID");

                entity.HasOne(d => d.PCQuestStatus)
                    .WithMany(p => p.PCQuestKillTargetProgress)
                    .HasForeignKey(d => d.PCQuestStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuestKillTargetProgress_PCQuesttatusID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCQuestKillTargetProgress)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuestKillTargetProgress_PlayerID");
            });

            modelBuilder.Entity<PCQuestStatus>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCQuestStatus_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PlayerID)
                    .HasName("FK_PCQuesttatus_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.QuestID).HasColumnType("int(11)");

                entity.Property(e => e.QuestState).HasColumnType("int(11)");

                entity.Property(e => e.SelectedItemRewardID).HasColumnType("int(11)");

                entity.Property(e => e.TimesCompleted).HasColumnType("int(11)");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCQuestStatus)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuesttatus_PlayerID");
            });

            modelBuilder.Entity<PCRegionalFame>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCRegionalFame_ID")
                    .IsUnique();

                entity.HasIndex(e => e.FameRegionID)
                    .HasName("FK_PCRegionalFame_FameRegionID");

                entity.HasIndex(e => new { e.PlayerID, e.Amount, e.FameRegionID })
                    .HasName("IX_PCRegionalFame_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Amount).HasColumnType("int(11)");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.FameRegionID).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.FameRegion)
                    .WithMany(p => p.PCRegionalFame)
                    .HasForeignKey(d => d.FameRegionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCRegionalFame_FameRegionID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCRegionalFame)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCRegionalFame_PlayerID");
            });

            modelBuilder.Entity<PCSearchSite>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCSearchSite_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerID, e.SearchSiteID, e.UnlockDateTime })
                    .HasName("IX_PCSearchSite_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SearchSiteID).HasColumnType("int(11)");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCSearchSite)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCSearchSite_PlayerID");
            });

            modelBuilder.Entity<PCSearchSiteItem>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCSearchSiteItem_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PlayerID)
                    .HasName("fk_PCSearchSiteItem_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SearchItem)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SearchSiteID).HasColumnType("int(11)");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCSearchSiteItem)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCSearchSiteItem_PlayerID");
            });

            modelBuilder.Entity<PCSkill>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCSkill_ID")
                    .IsUnique();

                entity.HasIndex(e => e.SkillID)
                    .HasName("FK_PCSkill_SkillID");

                entity.HasIndex(e => new { e.PlayerID, e.IsLocked, e.Rank, e.SkillID, e.XP })
                    .HasName("IX_PCSkill_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Rank).HasColumnType("int(11)");

                entity.Property(e => e.SkillID).HasColumnType("int(11)");

                entity.Property(e => e.XP).HasColumnType("int(11)");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCSkill)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCSkill_PlayerID");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.PCSkill)
                    .HasForeignKey(d => d.SkillID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCSkill_SkillID");
            });

            modelBuilder.Entity<PCSkillPool>(entity =>
            {
                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCSkillPool_ID")
                    .IsUnique();

                entity.HasIndex(e => e.SkillCategoryID)
                    .HasName("FK_PCSkillPool_SkillCategoryID");

                entity.HasIndex(e => new { e.PlayerID, e.SkillCategoryID })
                    .HasName("UQ_PCSkillPool")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerID, e.Levels, e.SkillCategoryID })
                    .HasName("IX_PCSkillPool_PlayerID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Levels).HasColumnType("int(11)");

                entity.Property(e => e.PlayerID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SkillCategoryID).HasColumnType("int(11)");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PCSkillPool)
                    .HasForeignKey(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCSkillPool_PlayerID");

                entity.HasOne(d => d.SkillCategory)
                    .WithMany(p => p.PCSkillPool)
                    .HasForeignKey(d => d.SkillCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCSkillPool_SkillCategoryID");
            });

            modelBuilder.Entity<PCWeapon>(entity =>
            {
                entity.HasKey(e => e.PlayerID)
                    .HasName("PRIMARY");

                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_PCWeapon_PlayerID")
                    .IsUnique();

                entity.Property(e => e.PlayerID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Weapon1)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weapon10)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weapon2)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weapon3)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weapon4)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weapon5)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weapon6)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weapon7)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weapon8)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weapon9)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.HasOne(d => d.Player)
                    .WithOne(p => p.PCWeapon)
                    .HasForeignKey<PCWeapon>(d => d.PlayerID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCWeapon_PlayerID");
            });

            modelBuilder.Entity<Perk>(entity =>
            {
                entity.HasIndex(e => e.CooldownCategoryID)
                    .HasName("fk_Perk_CooldownCategoryID");

                entity.HasIndex(e => e.EnmityAdjustmentRuleID)
                    .HasName("fk_Perk_EnmityAdjustmentRuleID");

                entity.HasIndex(e => e.ExecutionTypeID)
                    .HasName("fk_Perk_ExecutionTypeID");

                entity.HasIndex(e => e.ForceBalanceTypeID)
                    .HasName("FK_Perk_ForceBalanceTypeID");

                entity.HasIndex(e => e.PerkCategoryID)
                    .HasName("fk_Perk_PerkCategoryID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.CastAnimationID).HasColumnType("int(11)");

                entity.Property(e => e.CooldownCategoryID).HasColumnType("int(11)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(256)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Enmity).HasColumnType("int(11)");

                entity.Property(e => e.EnmityAdjustmentRuleID).HasColumnType("int(11)");

                entity.Property(e => e.ExecutionTypeID).HasColumnType("int(11)");

                entity.Property(e => e.ForceBalanceTypeID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PerkCategoryID).HasColumnType("int(11)");

                entity.HasOne(d => d.CooldownCategory)
                    .WithMany(p => p.Perk)
                    .HasForeignKey(d => d.CooldownCategoryID)
                    .HasConstraintName("fk_Perk_CooldownCategoryID");

                entity.HasOne(d => d.EnmityAdjustmentRule)
                    .WithMany(p => p.Perk)
                    .HasForeignKey(d => d.EnmityAdjustmentRuleID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Perk_EnmityAdjustmentRuleID");

                entity.HasOne(d => d.ExecutionType)
                    .WithMany(p => p.Perk)
                    .HasForeignKey(d => d.ExecutionTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Perk_ExecutionTypeID");

                entity.HasOne(d => d.ForceBalanceType)
                    .WithMany(p => p.Perk)
                    .HasForeignKey(d => d.ForceBalanceTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Perk_ForceBalanceTypeID");

                entity.HasOne(d => d.PerkCategory)
                    .WithMany(p => p.Perk)
                    .HasForeignKey(d => d.PerkCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_Perk_PerkCategoryID");
            });

            modelBuilder.Entity<PerkCategory>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Sequence).HasColumnType("int(11)");
            });

            modelBuilder.Entity<PerkExecutionType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<PerkFeat>(entity =>
            {
                entity.HasIndex(e => e.FeatID)
                    .HasName("UQ_PerkFeat_FeatID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PerkID, e.PerkLevelUnlocked })
                    .HasName("UQ_PerkFeat_SurrogateKey")
                    .IsUnique();

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.BaseFPCost).HasColumnType("int(11)");

                entity.Property(e => e.ConcentrationFPCost).HasColumnType("int(11)");

                entity.Property(e => e.ConcentrationTickInterval).HasColumnType("int(11)");

                entity.Property(e => e.FeatID).HasColumnType("int(11)");

                entity.Property(e => e.PerkID).HasColumnType("int(11)");

                entity.Property(e => e.PerkLevelUnlocked).HasColumnType("int(11)");

                entity.HasOne(d => d.Perk)
                    .WithMany(p => p.PerkFeat)
                    .HasForeignKey(d => d.PerkID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PerkFeat_PerkID");
            });

            modelBuilder.Entity<PerkLevel>(entity =>
            {
                entity.HasIndex(e => e.SpecializationID)
                    .HasName("FK_PerkLevel_SpecializationID");

                entity.HasIndex(e => new { e.PerkID, e.Level })
                    .HasName("uq_PerkLevel_PerkIDLevel")
                    .IsUnique();

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(512)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Level).HasColumnType("int(11)");

                entity.Property(e => e.PerkID).HasColumnType("int(11)");

                entity.Property(e => e.Price).HasColumnType("int(11)");

                entity.Property(e => e.SpecializationID).HasColumnType("int(11)");

                entity.HasOne(d => d.Perk)
                    .WithMany(p => p.PerkLevel)
                    .HasForeignKey(d => d.PerkID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PerkLevel_PerkID");

                entity.HasOne(d => d.Specialization)
                    .WithMany(p => p.PerkLevel)
                    .HasForeignKey(d => d.SpecializationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PerkLevel_SpecializationID");
            });

            modelBuilder.Entity<PerkLevelQuestRequirement>(entity =>
            {
                entity.HasIndex(e => e.PerkLevelID)
                    .HasName("FK_PerkLevelQuestRequirement_PerkLevelID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.PerkLevelID).HasColumnType("int(11)");

                entity.Property(e => e.RequiredQuestID).HasColumnType("int(11)");

                entity.HasOne(d => d.PerkLevel)
                    .WithMany(p => p.PerkLevelQuestRequirement)
                    .HasForeignKey(d => d.PerkLevelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PerkLevelQuestRequirement_PerkLevelID");
            });

            modelBuilder.Entity<PerkLevelSkillRequirement>(entity =>
            {
                entity.HasIndex(e => e.PerkLevelID)
                    .HasName("FK_PerkLevelkillRequirements_PerkLevelID");

                entity.HasIndex(e => e.SkillID)
                    .HasName("FK_PerkLevelkillRequirements_SkillID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.PerkLevelID).HasColumnType("int(11)");

                entity.Property(e => e.RequiredRank).HasColumnType("int(11)");

                entity.Property(e => e.SkillID).HasColumnType("int(11)");

                entity.HasOne(d => d.PerkLevel)
                    .WithMany(p => p.PerkLevelSkillRequirement)
                    .HasForeignKey(d => d.PerkLevelID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PerkLevelkillRequirements_PerkLevelID");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.PerkLevelSkillRequirement)
                    .HasForeignKey(d => d.SkillID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PerkLevelkillRequirements_SkillID");
            });

            modelBuilder.Entity<Plant>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.BaseTicks).HasColumnType("int(11)");

                entity.Property(e => e.Level).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Resref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SeedResref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.WaterTicks).HasColumnType("int(11)");
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.HasIndex(e => e.ActiveConcentrationPerkID)
                    .HasName("FK_Player_ActiveConcentrationPerkID");

                entity.HasIndex(e => e.AssociationID)
                    .HasName("FK_Player_AssociationID");

                entity.HasIndex(e => e.ClusterID)
                    .HasName("CIX_Player_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PrimaryResidencePCBaseID)
                    .HasName("FK_Player_PrimaryResidencePCBaseID");

                entity.HasIndex(e => e.PrimaryResidencePCBaseStructureID)
                    .HasName("FK_Player_PrimaryResidencePCBaseStructureID");

                entity.HasIndex(e => e.SpecializationID)
                    .HasName("FK_Player_SpecializationID");

                entity.Property(e => e.ID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ActiveConcentrationPerkID).HasColumnType("int(11)");

                entity.Property(e => e.ActiveConcentrationTier).HasColumnType("int(11)");

                entity.Property(e => e.AssociationID).HasColumnType("int(11)");

                entity.Property(e => e.CHABase).HasColumnType("int(11)");

                entity.Property(e => e.CONBase).HasColumnType("int(11)");

                entity.Property(e => e.CharacterName)
                    .HasColumnType("longtext")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ClusterID)
                    .HasColumnType("int(11)")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.CurrentFP).HasColumnType("int(11)");

                entity.Property(e => e.CurrentFPTick).HasColumnType("int(11)");

                entity.Property(e => e.DEXBase).HasColumnType("int(11)");

                entity.Property(e => e.DisplayDiscord)
                    .IsRequired()
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.DisplayHelmet)
                    .IsRequired()
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.DisplayHolonet)
                    .IsRequired()
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.GoldTill).HasColumnType("int(11)");

                entity.Property(e => e.HPRegenerationAmount).HasColumnType("int(11)");

                entity.Property(e => e.HitPoints).HasColumnType("int(11)");

                entity.Property(e => e.INTBase).HasColumnType("int(11)");

                entity.Property(e => e.LeaseRate).HasColumnType("int(11)");

                entity.Property(e => e.LocationAreaResref)
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.LocationInstanceID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.MaxFP).HasColumnType("int(11)");

                entity.Property(e => e.PrimaryResidencePCBaseID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PrimaryResidencePCBaseStructureID)
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.RegenerationRate).HasColumnType("int(11)");

                entity.Property(e => e.RegenerationTick).HasColumnType("int(11)");

                entity.Property(e => e.RespawnAreaResref)
                    .HasColumnType("varchar(16)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.RoleplayPoints).HasColumnType("int(11)");

                entity.Property(e => e.RoleplayXP).HasColumnType("int(11)");

                entity.Property(e => e.STRBase).HasColumnType("int(11)");

                entity.Property(e => e.SpecializationID).HasColumnType("int(11)");

                entity.Property(e => e.TotalSPAcquired).HasColumnType("int(11)");

                entity.Property(e => e.UnallocatedSP).HasColumnType("int(11)");

                entity.Property(e => e.VersionNumber).HasColumnType("int(11)");

                entity.Property(e => e.WISBase).HasColumnType("int(11)");

                entity.Property(e => e.XPBonus).HasColumnType("int(11)");

                entity.HasOne(d => d.ActiveConcentrationPerk)
                    .WithMany(p => p.Player)
                    .HasForeignKey(d => d.ActiveConcentrationPerkID)
                    .HasConstraintName("FK_Player_ActiveConcentrationPerkID");

                entity.HasOne(d => d.Association)
                    .WithMany(p => p.Player)
                    .HasForeignKey(d => d.AssociationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Player_AssociationID");

                entity.HasOne(d => d.PrimaryResidencePCBase)
                    .WithMany(p => p.PlayerNavigation)
                    .HasForeignKey(d => d.PrimaryResidencePCBaseID)
                    .HasConstraintName("FK_Player_PrimaryResidencePCBaseID");

                entity.HasOne(d => d.PrimaryResidencePCBaseStructure)
                    .WithMany(p => p.Player)
                    .HasForeignKey(d => d.PrimaryResidencePCBaseStructureID)
                    .HasConstraintName("FK_Player_PrimaryResidencePCBaseStructureID");

                entity.HasOne(d => d.Specialization)
                    .WithMany(p => p.Player)
                    .HasForeignKey(d => d.SpecializationID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Player_SpecializationID");
            });

            modelBuilder.Entity<ServerConfiguration>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.LastGuildTaskUpdate).HasDefaultValueSql("'1900-01-01 00:00:00.000000'");

                entity.Property(e => e.MessageOfTheDay)
                    .IsRequired()
                    .HasColumnType("varchar(1024)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.ModuleVersion).HasColumnType("int(11)");

                entity.Property(e => e.ServerName)
                    .IsRequired()
                    .HasColumnType("varchar(50)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Skill>(entity =>
            {
                entity.HasIndex(e => e.Primary)
                    .HasName("FK_Skill_Primary");

                entity.HasIndex(e => e.Secondary)
                    .HasName("FK_Skill_Secondary");

                entity.HasIndex(e => e.SkillCategoryID)
                    .HasName("FK_Skill_SkillCategoryID");

                entity.HasIndex(e => e.Tertiary)
                    .HasName("FK_Skill_Tertiary");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.ContributesToSkillCap)
                    .IsRequired()
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("varchar(1024)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.MaxRank).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Primary).HasColumnType("int(11)");

                entity.Property(e => e.Secondary).HasColumnType("int(11)");

                entity.Property(e => e.SkillCategoryID).HasColumnType("int(11)");

                entity.Property(e => e.Tertiary).HasColumnType("int(11)");

                entity.HasOne(d => d.PrimaryNavigation)
                    .WithMany(p => p.SkillPrimaryNavigation)
                    .HasForeignKey(d => d.Primary)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Skill_Primary");

                entity.HasOne(d => d.SecondaryNavigation)
                    .WithMany(p => p.SkillSecondaryNavigation)
                    .HasForeignKey(d => d.Secondary)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Skill_Secondary");

                entity.HasOne(d => d.SkillCategory)
                    .WithMany(p => p.Skill)
                    .HasForeignKey(d => d.SkillCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Skill_SkillCategoryID");

                entity.HasOne(d => d.TertiaryNavigation)
                    .WithMany(p => p.SkillTertiaryNavigation)
                    .HasForeignKey(d => d.Tertiary)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Skill_Tertiary");
            });

            modelBuilder.Entity<SkillCategory>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Sequence).HasColumnType("int(11)");
            });

            modelBuilder.Entity<SpaceEncounter>(entity =>
            {
                entity.HasIndex(e => e.LootTableID)
                    .HasName("FK_SpaceEncounter_LootTableID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Chance).HasColumnType("int(11)");

                entity.Property(e => e.Difficulty).HasColumnType("int(11)");

                entity.Property(e => e.LootTableID).HasColumnType("int(11)");

                entity.Property(e => e.Planet)
                    .IsRequired()
                    .HasColumnType("varchar(255)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.TypeID).HasColumnType("int(11)");

                entity.HasOne(d => d.LootTable)
                    .WithMany(p => p.SpaceEncounter)
                    .HasForeignKey(d => d.LootTableID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SpaceEncounter_LootTableID");
            });

            modelBuilder.Entity<Spawn>(entity =>
            {
                entity.HasIndex(e => e.SpawnObjectTypeID)
                    .HasName("FK_Spawn_SpawnObjectTypeID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SpawnObjectTypeID).HasColumnType("int(11)");

                entity.HasOne(d => d.SpawnObjectType)
                    .WithMany(p => p.Spawn)
                    .HasForeignKey(d => d.SpawnObjectTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Spawn_SpawnObjectTypeID");
            });

            modelBuilder.Entity<SpawnObject>(entity =>
            {
                entity.HasIndex(e => e.NPCGroupID)
                    .HasName("FK_SpawnObject_NPCGroupID");

                entity.HasIndex(e => e.SpawnID)
                    .HasName("FK_SpawnObject_SpawnID");

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.AIFlags).HasColumnType("int(11)");

                entity.Property(e => e.BehaviourScript)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.DeathVFXID).HasColumnType("int(11)");

                entity.Property(e => e.NPCGroupID).HasColumnType("int(11)");

                entity.Property(e => e.Resref)
                    .IsRequired()
                    .HasColumnType("varchar(16)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.SpawnID).HasColumnType("int(11)");

                entity.Property(e => e.SpawnRule)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasDefaultValueSql("''")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.Weight)
                    .HasColumnType("int(11)")
                    .HasDefaultValueSql("'1'");

                entity.HasOne(d => d.NPCGroup)
                    .WithMany(p => p.SpawnObject)
                    .HasForeignKey(d => d.NPCGroupID)
                    .HasConstraintName("FK_SpawnObject_NPCGroupID");

                entity.HasOne(d => d.Spawn)
                    .WithMany(p => p.SpawnObject)
                    .HasForeignKey(d => d.SpawnID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SpawnObject_SpawnID");
            });

            modelBuilder.Entity<SpawnObjectType>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Specialization>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<Starport>(entity =>
            {
                entity.HasIndex(e => e.StarportID)
                    .HasName("UQ__Starport__36C4170821AB9846")
                    .IsUnique();

                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Cost).HasColumnType("int(11)");

                entity.Property(e => e.CustomsDC).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.PlanetName)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.StarportID)
                    .IsRequired()
                    .HasColumnType("varchar(64)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");

                entity.Property(e => e.WaypointTag)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            modelBuilder.Entity<StructureMode>(entity =>
            {
                entity.Property(e => e.ID).HasColumnType("int(11)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("varchar(32)")
                    .HasCharSet("utf8")
                    .HasCollation("utf8_general_ci");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}